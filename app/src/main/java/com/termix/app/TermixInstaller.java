package com.termix.app;import java.lang.Process; // This is usually implicit, but good to confirm.import android.content.Intent;import android.app.Activity;import android.content.ClipData;import android.content.ClipboardManager;import android.content.Context;import android.os.AsyncTask;import android.os.Bundle;import android.util.Log;import android.view.Gravity;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ScrollView;import android.widget.TextView;import android.content.Intent;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.FileOutputStream;import java.io.InputStreamReader;import java.util.List;import java.util.ArrayList;import java.util.Queue;import java.util.LinkedList;import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingQueue;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import android.content.Context;public class TermixInstaller extends Activity {    private String dataPath;        // Declare your UI components here    private TextView logTextView;    private ScrollView logScrollView;    private StringBuilder logBuilder;    private NativeExecutor executor; // Assuming this is defined somewhere in your project    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        // Initialize the UI        LinearLayout layout = new LinearLayout(this);        layout.setOrientation(LinearLayout.VERTICAL);        setContentView(layout);        // Copy log button        Button copyLogButton = new Button(this);        copyLogButton.setText("Copy Log");        layout.addView(copyLogButton);        // Copy log button action        copyLogButton.setOnClickListener(v -> copyLogToClipboard());        // Log output area wrapped in a ScrollView        logScrollView = new ScrollView(this);        layout.addView(logScrollView);        logTextView = new TextView(this);        logTextView.setPadding(10, 10, 10, 10);        logTextView.setTextSize(12);        logScrollView.addView(logTextView); // Add the TextView inside the ScrollView        logBuilder = new StringBuilder();        // Initialize the NativeExecutor        try {            executor = new NativeExecutor(this);        } catch (Exception e) {            e.printStackTrace();            addLogToUI("Error initializing NativeExecutor: " + e.getMessage());        }dataPath = getFilesDir().getAbsolutePath();  // Get the app's data directory//File tmpDir = new File(dataPath + "/tmp");  // Correctly concatenate the stringscreateTmpDirectory() ;        // Copy scripts from assets to files directory        copyAndReplaceAssetToFiles("start_proot.sh");        // copyAndReplaceAssetToFiles("motd");   //      copyAndReplaceAssetToFiles(".bashrc");              //   copyAssetToFiles("example.sh");     //   copyAssetToFiles("extractor.sh");     //   copyAssetToFiles("start_sshd.sh");     //   copyAssetToFiles("status_sshd.sh");   //     copyAssetToFiles("start_proot_session.sh");    //    copyAssetToFiles("proot");    //    copyAssetToFiles("ubuntu-rootfs-arm64.tar.xz");   //     createHomeDirectoryAndSymlink();        // Run the installation process asynchronously        new ProotInstallationTask().execute();        //copyAndReplaceAssetFromTo("motd", "etc/motd");copyAndReplaceAssetFromTo("etc", "etc");//copyAndReplaceAssetFromTo(".bashrc", "rootfs/root/.bashrc");copyAndRenameAsset("dotbashrc", "home/.bashrc");    }    private void createTmpDirectory() {        try {        	        addLogToUI("Setting Temp Folder");                    // Create the home directory            //File tmpDir = new File(/tmp");            File tmpDir = new File(dataPath + "/tmp");  // Correctly concatenate the strings            if (!tmpDir.exists()) {                boolean dirCreated = tmpDir.mkdirs();                if (dirCreated) {                    addLogToUI("Directory temp created" );                      //      addLogToUI("Directory created: " + tmpDir.getPath());                            } else {                    addLogToUI("Failed to create temp directory. terminone wont work without temp directory.");                    return;                }            }            // Set permissions to 777            Process chmod = Runtime.getRuntime().exec("chmod temp dir to 777 ");         //   Process chmod = Runtime.getRuntime().exec("chmod 777 " + tmpDir.getPath());                        chmod.waitFor();        //    addLogToUI("Permissions set to 777 for: " + tmpDir.getPath());                        addLogToUI("Permissions temp dir  set to 777");            //            //symlink.waitFor();      //      addLogToUI("tmp created in : " + tmpDir.getPath());            addLogToUI("tmp created");                    } catch (IOException | InterruptedException e) {            e.printStackTrace();            addLogToUI("Error creating directory or symlink: " + e.getMessage());        }    }private void copyAndRenameAsset(String assetFilePath, String targetFilePath) {    // Create the target file based on the specified target file path    File targetFile = new File(getFilesDir(), targetFilePath);    try {        // Check if the target file already exists        if (targetFile.exists()) {            addLogToUI("File already exists, replacing: " + targetFile.getAbsolutePath());            if (!targetFile.delete()) {                addLogToUI("Error deleting the existing file: " + targetFile.getAbsolutePath());                return; // Exit if the file cannot be deleted            }        }        // Proceed to copy the asset file        try (InputStream inputStream = getAssets().open(assetFilePath);             FileOutputStream outputStream = new FileOutputStream(targetFile)) {            byte[] buffer = new byte[1024];            int length;            while ((length = inputStream.read(buffer)) > 0) {                outputStream.write(buffer, 0, length);            }            // Set the file as executable            targetFile.setExecutable(true);            addLogToUI("File copied and made executable: " + targetFile.getAbsolutePath());        }    } catch (IOException e) {        e.printStackTrace();        addLogToUI("Error copying file: " + e.getMessage() + " | Asset: " + assetFilePath);    }}        private void createHomeDirectoryAndSymlink() {        try {        	        addLogToUI("Create Home Folder");                    // Create the home directory       //     File homeDir = new File("/data/data/com.hayinfx.terminone/files/home");            File homeDir = new File(dataPath + "/home");  // Correctly concatenate the strings            if (!homeDir.exists()) {                boolean dirCreated = homeDir.mkdirs();                if (dirCreated) {                  //  addLogToUI("Directory created: " + homeDir.getPath());                       addLogToUI("Directory home created");                                 } else {                    addLogToUI("Failed to create home directory.");                    return;                }            }            // Set permissions to 777            Process chmod = Runtime.getRuntime().exec("chmod 777 " + homeDir.getPath());            chmod.waitFor();            addLogToUI("Permissions set to 777 for: " + homeDir.getPath());            // Create symlink        //    String symlinkPath = "/data/data/com.hayinfx.terminone/home";        //    Process symlink = Runtime.getRuntime().exec("ln -s " + homeDir.getPath() + " " + symlinkPath);          //  symlink.waitFor();      //      addLogToUI("Symlink created from " + homeDir.getPath() + " to " + symlinkPath);   //   addLogToUI("Symlink Home created");        } catch (IOException | InterruptedException e) {            e.printStackTrace();            addLogToUI("Error creating home directory : " + e.getMessage());        }    }        // method to copy and replace folder or file or booth private void copyAndReplaceAssetFromTo(String assetFilePath, String targetFilePath) {    try {        // Get a list of assets (files or folders) in the given assetFilePath        String[] assets = getAssets().list(assetFilePath);        // If assets is not null and contains files, it's a directory        if (assets != null && assets.length > 0) {            // Create the target directory            File targetDir = new File(getFilesDir(), targetFilePath);            if (!targetDir.exists() && !targetDir.mkdirs()) {                addLogToUI("Error creating directory: " + targetDir.getAbsolutePath());                return;            }            // Recursively copy each file or folder            for (String asset : assets) {                copyAndReplaceAssetFromTo(                    assetFilePath + "/" + asset,                    targetFilePath + "/" + asset                );            }        } else {            // If no assets are found, it's a file, so copy it directly            copyFile(assetFilePath, targetFilePath);        }    } catch (IOException e) {        e.printStackTrace();        addLogToUI("Error copying asset: " + e.getMessage());    }}private void copyFile(String assetFilePath, String targetFilePath) {    File targetFile = new File(getFilesDir(), targetFilePath);    try {        // Check if the target file already exists        if (targetFile.exists()) {            addLogToUI("File already exists, replacing: " + targetFile.getAbsolutePath());            if (!targetFile.delete()) {                addLogToUI("Error deleting the existing file: " + targetFile.getAbsolutePath());                return; // Exit if the file cannot be deleted            }        }        // Proceed to copy the asset file        try (InputStream inputStream = getAssets().open(assetFilePath);             FileOutputStream outputStream = new FileOutputStream(targetFile)) {            byte[] buffer = new byte[1024];            int length;            while ((length = inputStream.read(buffer)) > 0) {                outputStream.write(buffer, 0, length);            }            // Check if the file has a .sh extension before making it executable            if (targetFile.getName().endsWith(".sh")) {                targetFile.setExecutable(true);                addLogToUI("File copied and made executable: " + targetFile.getAbsolutePath());            } else {                addLogToUI("File copied but not made executable (not a .sh file): " + targetFile.getAbsolutePath());            }        }    } catch (IOException e) {        e.printStackTrace();        addLogToUI("Error copying file: " + e.getMessage());    }}private void copyAndReplaceAssetToFiles(String assetFileName) {    File file = new File(getFilesDir(), assetFileName);    try {        // Check if the file already exists        if (file.exists()) {            // Log message about replacing the existing file            addLogToUI("File already exists, replacing: " + file.getAbsolutePath());            // Delete the existing file            if (!file.delete()) {                addLogToUI("Error deleting the existing file: " + file.getAbsolutePath());                return; // Exit if the file cannot be deleted            }        }        // Proceed to copy the asset file        try (InputStream inputStream = getAssets().open(assetFileName);             FileOutputStream outputStream = new FileOutputStream(file)) {            byte[] buffer = new byte[1024];            int length;            while ((length = inputStream.read(buffer)) > 0) {                outputStream.write(buffer, 0, length);            }            // Set the file as executable            file.setExecutable(true);            addLogToUI("File copied and made executable: " + file.getAbsolutePath());        }    } catch (IOException e) {        e.printStackTrace();        addLogToUI("Error copying file: " + e.getMessage());    }}    private void copyAssetToFiles(String assetFileName) {        File file = new File(getFilesDir(), assetFileName);        if (!file.exists()) {            try (InputStream inputStream = getAssets().open(assetFileName);                 FileOutputStream outputStream = new FileOutputStream(file)) {                byte[] buffer = new byte[1024];                int length;                while ((length = inputStream.read(buffer)) > 0) {                    outputStream.write(buffer, 0, length);                }                // Set the file as executable                file.setExecutable(true);                addLogToUI("File copied and made executable: " + file.getAbsolutePath());            } catch (IOException e) {                e.printStackTrace();                addLogToUI("Error copying file: " + e.getMessage());            }        } else {            addLogToUI("File already exists: " + file.getAbsolutePath());        }    }    private class ProotInstallationTask extends AsyncTask<Void, String, Void> {        @Override        protected Void doInBackground(Void... voids) {            try {                if (executor.needLoadProot()) {                    publishProgress("Downloading and Installing PRoot...");                    executor.loadProot();                }                if (executor.needExtractRootfs()) {                    if (executor.needLoadRootfs()) {                        publishProgress("Downloading Alpine  RootFS...");                        executor.loadRootfs();                    }                    publishProgress("Extracting Alpine RootFS...");                    executor.extractRootfs();                }                if (executor.needSetNameServers()) {                    publishProgress("Setting Alpine Name Servers...");                    executor.setNameServers();                }publishProgress("Create Symlink for Home data...");//executor.exec("ln", "-s", dataPath + "/home", dataPath + "/rootfs/root");File targetDir = new File(dataPath + "/rootfs/root");if (!targetDir.exists()) {    executor.exec("ln", "-s", dataPath + "/home", targetDir.getAbsolutePath());} else {    // Handle the case where the symlink already exists    addLogToUI("Home Symlink already exists");}                publishProgress("Installing core package (bash)...");                executor.exec("apk", "add", "bash");                                 publishProgress("Installing core package (openssh)...");                executor.exec("apk", "add", "openssh");                             publishProgress("Installing core package (Nano Text Editor)...");                executor.exec("apk", "add", "nano");               publishProgress("Installing core package (wget)...");                executor.exec("apk", "add", "wget");                                publishProgress("Setting Default Root Password...");             //   executor.exec("echo", "'root:termin12345'", "|", "chpasswd");executor.exec("/bin/sh", "-c", "echo 'root:termin12345' | chpasswd");                publishProgress("Generating Root SSH Key for SSHD Server...");                executor.exec("ssh-keygen", "-A");//executor.exec("ssh-keygen", "-t", "rsa", "-b", "4096", "-f", "/root/.ssh/id_rsa");//publishProgress("Add the Root public key to the authorized_keys...");//executor.exec("cat", "/root/.ssh/id_rsa.pub", ">>", "/root/.ssh/authorized_keys");//publishProgress("Set the correct permissions for the SSH configuration...");//executor.exec("chmod", "700", "/root/.ssh");//executor.exec("chmod", "600", "/root/.ssh/authorized_keys");                publishProgress("Setting SSHD port to 2424...");                executor.exec("sed", "-i", "s/#Port 22/Port 2424/", "/etc/ssh/sshd_config");                                publishProgress("Setting SSHD to alow Public Key...");                executor.exec("sed", "-i", "s/#PubkeyAuthentication yes/PubkeyAuthentication yes/", "/etc/ssh/sshd_config");                publishProgress("Setting the SSHD listen address to 0.0.0.0 (listens on all network interfaces)...");                executor.exec("sed", "-i", "s/#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/", "/etc/ssh/sshd_config");                publishProgress("Setting SSHD to Permit root login...");                executor.exec("sed", "-i", "s/#PermitRootLogin prohibit-password/PermitRootLogin yes/", "/etc/ssh/sshd_config");                publishProgress("Enable SSHD password authentication...");                executor.exec("sed", "-i", "s/#PasswordAuthentication yes/PasswordAuthentication yes/", "/etc/ssh/sshd_config");                publishProgress("terminone Installation completed.");            } catch (IOException | InterruptedException e) {                e.printStackTrace();                publishProgress("terminone Installation error: " + e.getMessage());            }            return null;        }        @Override        protected void onProgressUpdate(String... values) {            addLogToUI(values[0]);        }    }    private void addLogToUI(String logMessage) {        runOnUiThread(() -> {            logBuilder.append(logMessage).append("\n");            logTextView.setText(logBuilder.toString());            // Scroll to the bottom of the log            logScrollView.post(() -> logScrollView.fullScroll(ScrollView.FOCUS_DOWN));        });        Log.d("NativeExecutorStart", logMessage);    }    private void copyLogToClipboard() {        ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);        ClipData clip = ClipData.newPlainText("Native Executor Log", logBuilder.toString());        clipboard.setPrimaryClip(clip);        addLogToUI("Logs copied to clipboard.");    }}