//package com.termix;package com.termix.app;import android.app.IntentService;import android.content.Intent;import android.os.Bundle;import android.util.Log;import android.app.PendingIntent;import android.os.Build;import androidx.annotation.Nullable; // If youâ€™re using annotationsimport android.content.Context;import android.content.Intent;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.ProgressBar;import androidx.appcompat.app.AppCompatActivity;import java.io.File;import android.view.ViewGroup;//import com.termix.app.*;import com.termix.app.RunCommandService;import com.termix.R;import com.termix.shared.termux.TermuxConstants;import com.termix.shared.termux.TermuxConstants.TERMUX_APP.RUN_COMMAND_SERVICE;import android.widget.Toast;public class TermuxActivityPrep extends AppCompatActivity {    private ProgressBar progressBar;    private Button installButton;    private Button textEditorButton;    private Button startNodeJsServerButton;    private Button appHomeHtmlLoader;      //  private Button terminOneButton;    private Button closeButton;    private Button btnStartCommand; // Button for starting the Proot command    private static final String PROOT_COMMAND = "proot --link2symlink -0 -r /data/data/com.termux/files/home/alpine -b /data/data/com.termux/files/home:/data/data/com.termux/files/home -b /storage/emulated/0:/storage/emulated/0 /usr/bin/env -i HOME=/data/data/com.termux/files/home /bin/sh";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_termix_prep); // Keep your layout        checkCoreSys(this);        // Find the ProgressBar and Buttons in the layout        progressBar = findViewById(R.id.progressBar);        installButton = findViewById(R.id.installButton);        textEditorButton = findViewById(R.id.textEditorButton);        startNodeJsServerButton  = findViewById(R.id.startNodeJsServerButton);        appHomeHtmlLoader  = findViewById(R.id.appHomeHtmlLoader);//        terminOneButton = findViewById(R.id.terminOneButton); // Corrected to match IDs        closeButton = findViewById(R.id.closeButton);        // Make the ProgressBar visible if needed        progressBar.setVisibility(View.VISIBLE);        // Set up the Install button to start the TermixInstaller activity        installButton.setOnClickListener(v -> {            Intent intent = new Intent(TermuxActivityPrep.this, TermixInstaller.class);            startActivity(intent);        });        textEditorButton.setOnClickListener(v -> {            Intent intent = new Intent(TermuxActivityPrep.this, TextEditor.class);            startActivity(intent);        });                startNodeJsServerButton.setOnClickListener(v -> {        String LOG_TAG = "MainActivity";Intent intent = new Intent();intent.setClassName(TermuxConstants.TERMUX_PACKAGE_NAME, TermuxConstants.TERMUX_APP.RUN_COMMAND_SERVICE_NAME);intent.setAction(RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND);intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH, "/data/data/com.termix/files/usr/bin/top");intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_ARGUMENTS, new String[]{"-n", "20000"});intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_WORKDIR, "/data/data/com.termix/files/home");intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_BACKGROUND, true);intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_SESSION_ACTION, "0");intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_COMMAND_LABEL, "top command");intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_COMMAND_DESCRIPTION, "Runs the top command to show processes using the most resources.");// Create the intent for the IntentService class that should be sent the result by TermuxServiceIntent pluginResultsServiceIntent = new Intent(this, PluginResultsService.class);// Generate a unique execution id for this execution commandint executionId = PluginResultsService.getNextExecutionId();// Optional put an extra that uniquely identifies the command internally for your app.// This can be an Intent extra as well with more extras instead of just an int.pluginResultsServiceIntent.putExtra(PluginResultsService.EXTRA_EXECUTION_ID, executionId);// Create the PendingIntent that will be used by TermuxService to send result of// commands back to the IntentService// Note that the requestCode (currently executionId) must be unique for each pending// intent, even if extras are different, otherwise only the result of only the first// execution will be returned since pending intent will be cancelled by android// after the first result has been sent back via the pending intent and termux// will not be able to send more.PendingIntent pendingIntent = PendingIntent.getService(this, executionId,    pluginResultsServiceIntent,    PendingIntent.FLAG_ONE_SHOT | (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S ? PendingIntent.FLAG_MUTABLE : 0));intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_PENDING_INTENT, pendingIntent);try {    // Send command intent for execution    Log.d(LOG_TAG, "Sending execution command with id " + executionId);    startService(intent);} catch (Exception e) {    Log.e(LOG_TAG, "Failed to start execution command with id " + executionId + ": " + e.getMessage());}        });        appHomeHtmlLoader.setOnClickListener(v -> {            Intent intent = new Intent(TermuxActivityPrep.this, AppHomeHtmlLoader.class);            startActivity(intent);        });        // Set up the Close button        closeButton.setOnClickListener(v -> {            // Uncomment and modify this if you want to navigate to TermuxActivity            // Intent intent = new Intent(TermuxActivityPrep.this, TermuxActivity.class);            // startActivity(intent);            // finish(); // Close TermuxActivityPrep        });        // Create and configure the button for starting the Proot command        btnStartCommand = new Button(this);        btnStartCommand.setText("Start Command");        // Set the button's click listener      //  btnStartCommand.setOnClickListener(v -> startTermuxCommand());        // Add the button to the activity's layout     //   addContentView(btnStartCommand, new ViewGroup.LayoutParams(       //     ViewGroup.LayoutParams.WRAP_CONTENT,     //       ViewGroup.LayoutParams.WRAP_CONTENT));    }    public void checkCoreSys(Context context) {        // Get the app's data directory        String dataPath = context.getFilesDir().getAbsolutePath();        // Define the paths to check        String prootPath = dataPath + "/proot";        String rootfsPath = dataPath + "/rootfs";        String tmpPath = dataPath + "/tmp";        // Check if any of the directories do not exist        if (!directoryExists(prootPath) || !directoryExists(rootfsPath) || !directoryExists(tmpPath)) {            // Uncomment to start install activity directly if required            // startInstallActivity();        }    }    private boolean directoryExists(String path) {        File directory = new File(path);        return directory.exists() && directory.isDirectory();    }/**    private void startTermuxCommand() {        Intent intent = new Intent(this, RunCommandService.class);        intent.setAction(RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND);        // Add the Proot command to the intent        intent.putExtra(RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH, PROOT_COMMAND);        // Start the RunCommandService        startService(intent);    } **/}